---
- name: Create in-memory inventory with discovered ip address
  when: vm_ipaddress == ''
  block:
  - name: DEPLOY_VM get {{ vm_name }} ip address
    command: "/usr/local/bin/getvmip -r {{ vm_name }}"
    until: vm_ip.stdout != ""
    ignore_errors: yes
    retries: 2
    delay: 10
    register: vm_ip
    changed_when: False

  - name: set var vm_ipaddress with discovered ip address
    set_fact:
      vm_ipaddress: "{{ vm_ip.stdout }}"

- name: run tasks against {{ vm_name }} when ip address in known
  when: vm_ipaddress != ''
  block:
  - name: add {{ vm_name }} ip address {{ vm_ipaddress }} to in memory inventory
    add_host:
      name: "{{ vm_ipaddress }}"

  - name: remove host from known host
    become: no
    known_hosts:
      name: "{{ item }}"
      state: absent
      path: "/home/{{ admin_user }}/.ssh/known_hosts"
    ignore_errors: yes
    loop:
      - "{{ vm_name }}.{{ vm_domain }}"
      - "{{ vm_name }}"
      - "{{ vm_ipaddress }}"

- name: TEAR-DOWN-VM find all disk for the vm
  find:
    paths: "{{ kvm_vm_pool_dir }}/"
    patterns: "{{ vm_name }}_vd*.*"
  register: vm_disks_all

- name: TEAR-DOWN-VM check if OS disk exist
  stat:
    path: "{{ os_disk }}"
    get_checksum: no
    get_attributes: no
  register: os_disk_exist

- name: TEAR-DOWN-VM Shutdown {{ vm_name }}
  import_tasks: shutdown_vm.yml
  when: vm_name in all_instances.list_vms

- name: TEAR-DOWN-VM ensure {{ vm_name }} is unregistered from RHSM
  command: >
    /usr/local/bin/qubi-virt-customize -a {{ os_disk }} --run-command 'subscription-manager unregister'
  ignore_errors: true
  when: "os_disk_exist.stat.exists and 'rhel' in os_release"

- name: TEAR-DOWN-VM Destroy {{ vm_name }}
  virt:
    name: "{{ vm_name }}"
    command: undefine
  register: virsh_destroy_results
  when: vm_name in all_instances.list_vms

- name: TEAR-DOWN-VM remove {{ vm_name }} data directory {{ vm_data_dir }}/{{ vm_name }}
  file:
    path: "{{ vm_data_dir }}/{{ vm_name }}"
    state: absent

- name: TEAR-DOWN-VM delete all disks for {{ vm_name }}
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ vm_disks_all.files }}"
  when: vm_disks_all.matched != 0

#- meta: end_play
